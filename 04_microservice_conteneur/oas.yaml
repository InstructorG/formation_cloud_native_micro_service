openapi: 3.0.3

info:
  title: Orders API
  description: API that allows you to manage orders
  version: 1.0.0


paths:
  /orders:
    get:
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
      summary: Returns a list of orders
      operationId: getOrders
      description: >
        A list of orders made by the customer.
        Allows to filter orders by length.
      responses:
        '200':
          description: A JSON array of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/ListOrderSchema'


    post:
      summary: Creates an order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSchema'
      responses:
        '201':
          description: A JSON representation of the created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '409':
          $ref: '#/components/responses/NotFoundEntity'

  /orders/{order_id}:
    parameters:
      - in: path
        name: order_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Returns the details of a specific order
      operationId: getOrder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '404':
          $ref: '#/components/responses/NotFound'


    put:
      summary: Replaces an existing order
      operationId: updateOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSchema'
      responses:
        '205':
          description: OK
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/GetOrderSchema'
        '404':
          $ref: '#/components/responses/NotFound'


    delete:
      summary: Deletes an existing order
      operationId: deleteOrder
      responses:
        '204':
          description: The resource was deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'



components:
  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        detail:
          oneOf:
            - type: string
            - type: array
      required:
        - detail


    ListOrderSchema:
      type: object
      required:
        - orders
      properties:
        order:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderSchema'

    OrderSchema:
      type: object
      required:
        - id
        - created
        - status
      properties:
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - created
            - paid
            - progress
            - cancelled
            - dispatched
            - delivered

security:
  - bearerAuth:
      - getOrders
      - createOrder
      - getOrder
      - updateOrder
      - deleteOrder
